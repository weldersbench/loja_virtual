spring.application.name=loja_virtual

# endere�o de conex�o com o banco de dados + reconectar, caso caia a conex�o.
spring.datasource.url=jdbc:postgresql://localhost:5432/loja_virtual?autoreconnect=true
spring.datasource.username=postgres
spring.datasource.password=admin
# indica o driver de qual banco de dados est� sendo usando
spring.datasource.dbcp2.driver-class-name=org.postgresql.Driver

# para a grava��o no banco de dados.
spring.jpa.hibernate.ddl-auto=update
# indica a plataforma que esta sendo usado.
spring.datasource.platform=postgres

# erro de metadados, para evitar
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = true
# dialeto para o postgres
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect
# dialeto para o hibernate e base da plataforma para o jpa
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
# contexto do projeto. o que vem apos da /
server.servlet.context-path=/loja_virtual

# propriedades para upload

# maximo do tamanho arquivos
spring.servlet.multipart.max-file-size=10000KB 
# tamanho maximo da requisicao
spring.servlet.multipart.max-request-size=10000KB
# habilitar o upload
spring.servlet.mulltipart.enabled=true

# diminui a quantidade de dados que o servidor envia e recebe.
# habilita
server.compression.enabled=true
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
# minino da resposta do servidor
server.compression.min-response-size=1024
# web
server.http2.enabled=true

# codificacao

# codifica os caracteres especial
spring.http.encoding.charset=UTF-8
# habilita
spring.http.encoding.enabled=true
# forca essa codificacao
spring.http.encoding.force=true
# ser padrao para o request e response
spring.http.encoding.force-request=true
spring.http.encoding.force-response=true

# qual e a classe que vai fazer essa pool de conexoes
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
# numero maximo de milissegundos que um cliente aguardar por uma conexao
spring.datasource.hikari.connection-timeout=20000
# numero minimo de conexoes inativas mantidas pelo hikariCP em um conjunto de conexoes
spring.datasource.hikari.minimum-idle=200
# maximo do pool de conexao ativas
spring.datasource.hikari.maximum-pool-size=550
# tempo ociosos para conexao
spring.datasource.hikari.idle-timeout=10000
spring.datasource.hikari.pool-name=PoolHikari
# processos e execucoes dentro do banco de dados
spring.datasource.dbcp2.pool-prepared-statements=true
spring.datasource.dbcp2.max-open-prepared-statements=550

# salvando dados no banco automaticamente
spring.datasource.hikari.auto-commit=false
# limitar a sessao do usuario dentro do projeto
server.servlet.session.timeout=240m
# no caso de falhas, rollback esta ativo
spring.transaction.rollback-on-commit-failure=true
# batch processamento em lotes, para processar com mais facilidade, deixamos um gargalo = 4
spring.jpa.properties.hibernate.jdbc.batch_size=4
# serve tambem para o inserts e updats
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
# maximo de conexoes no servidor
server.tomcat.max-connections=50000
# processamento de performace em segundo plano
server.tomcat.min-spare-threads=1000
# limpar sujeira no banco
spring.session.jdbc.cleanup-cron= 0 0 4 * * *

# para noo bloquear o acesso de imagens ou outros recursos
spring.mvc.static-path-pattern=/resources/static/**
